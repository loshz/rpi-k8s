---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: grafana-volume-ownership
        image: busybox
        # This is necessary to give the grafana user permissions to store
        # data in the mounted volume which is originally owned by root.
        # 472 is grafana user (https://github.com/grafana/grafana-docker/blob/master/Dockerfile)
        command: ["sh", "-c", "chown -R 472:472 /var/lib/grafana"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/grafana
      containers:
      - name: grafana
        image: grafana/grafana-arm32v7-linux:6.2.1
        imagePullPolicy: Always
        resources:
          requests:
            memory: 100M
        ports:
        - containerPort: 3000
          name: http
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/grafana
        - name: config
          mountPath: /etc/grafana
      volumes:
      - name: config
        configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml            
          name: grafana
      - name: data
        emptyDir: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana
  labels:
    app: grafana
data:
  grafana.ini: |-
    instance_name = grafana

    [auth]
    disable_login_form = true

    [auth.anonymous]
    enabled = true
    org_role = Admin

    [auth.basic]
    enabled = false

    [analytics]
    reporting_enabled = false

  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: rpi-k8s
      type: prometheus
      url: http://prometheus
      access: proxy
      isDefault: true
      editable: true
